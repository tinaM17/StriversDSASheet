Problem Statement

Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
4
1 2 3 2
Sample Output 1:
2 4
Explanation Of Sample Input 1:
Input: ‘N’ = 5
‘A’ = [1, 2, 3, 2]

Output: {2, 4}

Explanation: The integer appearing twice is ‘2’, and the integer missing is ‘4’.
Sample Input 2:
3
1 2 1
Sample Output 2:
1 3
Constraints:
2 <= N <= 10^4
1 <= A[i] <= N

Time Limit: 1-sec

Solution Code:- 

public class Solution {
    public static int[] findMissingRepeatingNumbers(int[] a) {
        int frequency[] = new int[a.length + 1]; // Create a frequency array to store each number's frequency.
        int[] result = new int[2]; // Create an array to store the result - one missing and one repeating number.

        // Iterate over the input array to calculate the frequency of each number.
        for (int i = 0; i < a.length; i++) {
            frequency[a[i]] += 1;
        }

        // Iterate from 1 to n (size of the array) to find the missing and repeating numbers.
        for (int i = 1; i <= a.length; i++) {
            if (frequency[i] == 2) {
                result[0] = i; // If the frequency is 2, it's the repeating number.
            } else if (frequency[i] == 0) {
                result[1] = i; // If the frequency is 0, it's the missing number.
            }
        }

        return result; // Return the array containing the missing and repeating numbers.
    }
}


Time Complexity:-

O(2N), where N = the size of the given array.
Reason: We are using two loops each running for N times. So, the time complexity will be O(2N).

Space Complexity: O(N) as we are using a frequency array to solve this problem.
