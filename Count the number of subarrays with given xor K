Count the number of subarrays with given xor K

Problem Statement: Given an array of integers A and an integer B. Find the total number of subarrays having bitwise XOR of all elements equal to k.

Approach:
The steps are as follows:

First, we will declare a map to store the prefix XORs and their counts.
Then, we will set the value of 0 as 1 on the map.
Then we will run a loop(say i) from index 0 to n-1(n = size of the array).
For each index i, we will do the following:
We will XOR the current element i.e. arr[i] to the existing prefix XOR.
Then we will calculate the prefix XOR i.e. xr^k, for which we need the occurrence.
We will add the occurrence of the prefix XOR xr^k i.e. mpp[xr^k] to our answer.
Then we will store the current prefix XOR, xr in the map increasing its occurrence by 1.
Question: Why do we need to set the value of 0 beforehand?
Letâ€™s understand this using an example. Assume the given array is [3, 3, 1, 1, 1] and k is 3. Now, for index 0, we get the total prefix XOR as 3, and k is also 3. So, the prefix XOR xr^k will be = 3^3 = 0. Now, if the value is not previously set for the key 0 in the map, we will get the default value 0 and we will add 0 to our answer. This will mean that we have not found any subarray with XOR 3 till now. But this should not be the case as index 0 itself is a subarray with XOR k i.e. 3.
So, in order to avoid this situation we need to set the value of 0 as 1 on the map beforehand.

import java.util.*;

public class Solution {
    public static int subarraysWithSumK(int[] a, int b) {
        int totalXor = 0; // Initialize the total XOR to 0.
        Map<Integer, Integer> map = new HashMap<>(); // Create a HashMap to store cumulative XOR values.
        map.put(0, 1); // Initialize the HashMap with 0 XOR value having a frequency of 1.
        int n = a.length;
        int count = 0; // Initialize the count of subarrays with XOR equal to b.

        for (int i = 0; i < n; i++) {
            // Calculate the totalXor up to the current element a[i].
            totalXor = totalXor ^ a[i];

            // Calculate the required value x to achieve the XOR sum b.
            int x = totalXor ^ b;

            // Check if the value x is already present in the HashMap.
            // If present, it means there is a subarray whose XOR equals b.
            if (map.containsKey(x)) {
                count += map.get(x);
            }

            // Update the HashMap with the current totalXor value.
            // If it already exists, increase its frequency by 1, otherwise, initialize it to 1.
            map.put(totalXor, map.getOrDefault(totalXor, 0) + 1);
        }
        return count; // Return the count of subarrays with XOR sum equal to b.
    }
}
